@page "/Session/{bgguser}"
@inject IBoardGameRepository _boardGameRepo;
@inject ISessionHostingService _sessionManager;

<MudContainer>
    <MudGrid Justify="Justify.SpaceBetween">
        <MudItem xs="12"><MudSpacer></MudSpacer></MudItem>
        @if(_session.SessionIsReady)
        {
            <MudItem xs="4">
                <MudText Typo="Typo.h5">Session ID: @(_session.SessionId)</MudText>
            </MudItem>
            <MudItem xs="4">
                <MudButton Color="Color.Primary">Ready!</MudButton>
            </MudItem>
            <MudItem xs="4">
                <MudIconButton OnClick="@((x) => ToggleExtraInfo())" Color="Color.Tertiary" Icon="@InfoIcon" Size="Size.Large"/>
            </MudItem>
        }
    </MudGrid>
    <MudGrid Spacing="2" Justify="Justify.SpaceEvenly">
        @if(_session.AvailableGames != null && _session.AvailableGames.Count > 0)
        {
            @foreach(var game in _session.AvailableGames)
            {
                <MudItem xs="6" sm="4" md="3">
                    <MudCard Height="100%" Class="d-flex flex-column">
                        <MudCardHeader>
                            <MudText Align="Align.Center" Typo="Typo.h6">@game.Name</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudImage Src="@game.Thumbnail?.ToString()" Alt="Cover Image" 
                                Height="250" Width="250"
                                ObjectFit="ObjectFit.ScaleDown" ObjectPosition="ObjectPosition.Center"
                                Class="rounded-lg"/>
                            @if(DisplayExtras)
                            {
                                <MudText>Times Played: @game.TimesPlayed</MudText>
                                <MudText>Year Published: @game.YearPublished</MudText>
                            }
                        </MudCardContent>
                        <MudCardActions Class="mt-auto">
                            <MudButton OnClick="() => ToggleGameSelection(game)" Variant="Variant.Filled" Color="@GetGameSelectorButtonColor(game)" FullWidth="true">@GetGameSelectorButtonText(game)</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

<MudOverlay Visible="_gamesLoading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code 
{
    // TODO - Need to setup SignalR such that all users on this page for a particular session are looking at the same thing.
    // TODO - Need a way to "end" a session when nobody is connected to it.
    // TODO - Center the content of the cards.
    // TODO - Description part at the bottom of the card looks bad.
    // TODO - Top part of the page (with the Session ID and toggle button) look bad.

    [Parameter]
    public string BggUser { get; set; } = "";

    public bool DisplayExtras { get; set; } = true;

    public string InfoIcon { get; set; } = Icons.Material.Rounded.ExpandMore;

    private GamePickingSession _session = new GamePickingSession();

    private bool _gamesLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        _gamesLoading = true;
        StateHasChanged();

        // TODO - Need to make this work with more users
        _session = _sessionManager.StartSession();
        _session.JoinSession(new User() { Id = "TODO" });

        var userCollection = await _boardGameRepo.GetCollection(BggUser);
        if(userCollection != null && userCollection.Items.Count() > 0)
        {
            _session.AvailableGames = BoardGameMapper.MapFromCollection(userCollection).ToList();
            StateHasChanged();
        }
            
        // TODO - Should probably say something if no games were found.
        
        _gamesLoading = false;
        StateHasChanged();

        await base.OnParametersSetAsync();
    }

    public void ToggleGameSelection(BoardGame selectedGame)
    {
        selectedGame.IsSelected = !selectedGame.IsSelected;
        StateHasChanged();
    }

    public void ToggleExtraInfo()
    {
        DisplayExtras = !DisplayExtras;
        
        if(DisplayExtras)
            InfoIcon = Icons.Material.Filled.ExpandLess;
        else
            InfoIcon = Icons.Material.Rounded.ExpandMore;

        StateHasChanged();
    }

    public string GetGameSelectorButtonText(BoardGame associatedGame)
    {
        if(associatedGame.IsSelected)
            return "REMOVE";
        else 
            return "ADD";
    }

    public MudBlazor.Color GetGameSelectorButtonColor(BoardGame associatedGame)
    {
        if(associatedGame.IsSelected)
            return Color.Error;
        else
            return Color.Success;
    }
}