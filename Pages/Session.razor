@page "/Session/{sessionId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using AnalysisParalysis.Services.Enums;
@inject IDialogService _dialogService;
@inject ISessionHostingService _sessionManager;
@inject NavigationManager _navigation;
@implements IDisposable

<MudOverlay Visible="_preparingSession" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudContainer>
    <MudGrid Justify="Justify.Center" Class="d-flex justify-center flex-grow-1 gap-4">
        <MudItem xs="12"><MudSpacer></MudSpacer></MudItem>
        @if(_session.SessionIsReady)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h3">Session ID: @(_session.SessionId)</MudText>
            </MudItem>

            <MudItem xs="12">
                <MudContainer Class="d-flex align-center d-flex flex-row">
                    <MudText Typo="Typo.h5">Players: </MudText>
                    @foreach(var user in _session.ConnectedUsers)
                    {
                        if(user.Id == _session.OwningUser.Id)
                            continue;

                        <MudToggleIconButton
                            @bind-Toggled="@user.IsReady"
                            Disabled="true"
                            ToggledIcon="@Icons.Material.Outlined.CheckCircle" ToggledColor="@Color.Success"
                            Style="margin-top: 4px;"
                            Icon="@Icons.Material.Outlined.Circle" Color="Color.Error" />
                    }
                </MudContainer>
            </MudItem>

            <MudItem xs="12">
                <MudTextField 
                    @bind-Value="@GameFilter"
                    Label="Filter"
                    Clearable="true"
                    Variant="Variant.Outlined"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Outlined.FilterAlt"
                    AdornmentColor="Color.Info" 
                    DebounceInterval="500"
                    OnDebounceIntervalElapsed="FilterGames" />
            </MudItem>

            if(_session.OwningUser.Id == CurrentUser.Id)
            {
                <MudItem Justify="Justify.Center" Class="d-flex justify-center flex-grow-1 gap-4" xs="4">
                    <MudButton Variant="Variant.Filled" OnClick="@(() => FindMatches())" Color="Color.Primary" Size="Size.Large">Everyone's ready!</MudButton>
                </MudItem>
            }
            else 
            {
                <MudItem Justify="Justify.Center" Class="d-flex justify-center flex-grow-1 gap-4" xs="4">
                    <MudButton Variant="Variant.Filled" OnClick="@(() => ReadyUp())" Color="Color.Primary" Size="Size.Large">@GetReadyButtonText()</MudButton>
                </MudItem>
            }
            <MudItem Justify="Justify.Center" Class="d-flex justify-center flex-grow-1 gap-4" xs="4">
                <MudButton Variant="Variant.Filled" OnClick="@((x) => ToggleExtraInfo())" Color="Color.Tertiary" Icon="@InfoIcon" Size="Size.Large">@GetExtraInfoButtonText()</MudButton>
            </MudItem>
            <MudItem xs="12"><MudSpacer></MudSpacer></MudItem>
        }
    </MudGrid>

    <MudGrid Spacing="2" Justify="Justify.SpaceEvenly">
        @if(_availableGames != null && _availableGames.Count > 0)
        {
            @foreach(var game in _availableGames.Where(x => !x.IsHidden))
            {
                <MudItem sm="12" md="4" lg="3">
                    <MudCard Height="100%" Class="d-flex flex-column">
                        <MudCardHeader>
                            <MudText Align="Align.Center" Typo="Typo.h6">@game.Name</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudImage Src="@game.Thumbnail?.ToString()" Alt="Cover Image" 
                                Height="250" Width="250"
                                ObjectFit="ObjectFit.ScaleDown" ObjectPosition="ObjectPosition.Center"
                                Class="rounded-lg"/>
                            @if(DisplayExtras)
                            {
                                <MudText>Times Played: @game.TimesPlayed</MudText>
                                <MudText>Year Published: @game.YearPublished</MudText>
                            }
                        </MudCardContent>
                        <MudCardActions Class="mt-auto">
                            <MudButton OnClick="() => ToggleGameSelection(game)" Variant="Variant.Filled" Color="@GetGameSelectorButtonColor(game)" FullWidth="true">@GetGameSelectorButtonText(game)</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code 
{
    [Parameter]
    public int SessionId { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery(Name="bgguser")]
    public string BggUser { get; set; } = "";

    public bool DisplayExtras { get; set; } = true;

    public string InfoIcon { get; set; } = Icons.Material.Rounded.ExpandMore;

    public string GameFilter { get; set; } = "";

    private GamePickingSession _session = new GamePickingSession();

    private List<BoardGame> _availableGames = new List<BoardGame>();

    private HubConnection? _hubConnection;

    private bool _preparingSession = false;

    protected override async Task OnParametersSetAsync()
    {
        _preparingSession = true;
        StateHasChanged();

        await SetupHub();

        if(SessionId == 0)
        {
            await SetupNewSession();
        }
        else
        {
            await SetupExistingSession();
        }
        
        _preparingSession = false;
        StateHasChanged();

        await base.OnParametersSetAsync();
    }

    public async Task FindMatches()
    {
        try 
        {
            var selectedGame = _session.ChooseFromSelections();

            if(selectedGame == null)
            {
                _session.RestrictOptions(2);
                await _hubConnection!.SendAsync(SessionEvents.NoMatches.ToString(), _session);
            }
            else
            {
                await _hubConnection!.SendAsync(SessionEvents.GameSelected.ToString(), _session, selectedGame);
            }
        }
        catch(NoGamesFoundException)
        {
            var parameters = new DialogParameters();
            parameters.Add("ErrorMessage", $"Nobody has selected any games. Pick some then try again.");
            await _dialogService.ShowAsync<ErrorDialog>("No games selected.", parameters);
        }
    }

    public void ReadyUp()
    {
        _session.ToggleUserReadyStatus(CurrentUser);
        _hubConnection!.SendAsync(SessionEvents.UserReady.ToString(), _session);
    }

    public void ToggleGameSelection(BoardGame selectedGame)
    {
        selectedGame.IsSelected = !selectedGame.IsSelected;
        _session.AddUserSelection(CurrentUser, selectedGame);
        StateHasChanged();
    }

    public void ToggleExtraInfo()
    {
        DisplayExtras = !DisplayExtras;
        
        if(DisplayExtras)
            InfoIcon = Icons.Material.Filled.ExpandLess;
        else
            InfoIcon = Icons.Material.Rounded.ExpandMore;

        StateHasChanged();
    }

    public string GetGameSelectorButtonText(BoardGame associatedGame)
        => associatedGame.IsSelected ? "REMOVE" : "ADD";

    public string GetExtraInfoButtonText()
        => DisplayExtras ? "Hide info" : "Show info";

    public string GetReadyButtonText()
        => CurrentUser.IsReady ? "Not ready!" : "I'm ready!";

    public MudBlazor.Color GetGameSelectorButtonColor(BoardGame associatedGame)
        => associatedGame.IsSelected ? Color.Error : Color.Success;

    public async Task UserJoined(GamePickingSession session)
        => await InvokeAsync(StateHasChanged);
        

    public async Task UserLeft()
        => await InvokeAsync(StateHasChanged);

    public async Task ReadyStatusChanged()
        => await InvokeAsync(StateHasChanged);

    public async Task NoMatches()
        => await InvokeAsync(InternalNoMatches);

    public async Task GameSelected(BoardGame selectedGame)
        => await InvokeAsync(() => InternalGameSelected(selectedGame));

    private async Task SetupNewSession()
    {
        try
        {
            _session = await _sessionManager.StartSession(BggUser, CurrentUser);
            await _hubConnection!.SendAsync(SessionEvents.JoinSession.ToString(), _session, CurrentUser);
            MapAvailableGamesFromSession();
        }
        catch(NoGamesFoundException ex)
        {
            var errorParams = new DialogParameters();
            errorParams.Add("ErrorMessage", ex.Message);

            var dialog = await _dialogService.ShowAsync<ErrorDialog>("No games found.", errorParams);
            _ = await dialog.Result;
        
            _navigation.NavigateTo($"/");
        }
    }

    private async Task SetupExistingSession()
    {
        _session = _sessionManager.GetActiveSession(SessionId)
            ?? new GamePickingSession();

        try 
        {
            await _hubConnection!.SendAsync(SessionEvents.JoinSession.ToString(), _session, CurrentUser);
        }
        catch(Exception)
        {
            var errorParams = new DialogParameters();
            errorParams.Add("ErrorMessage", $"An unexpected error occurred when attempting to join session #{_session.SessionId}.");

            var dialog = await _dialogService.ShowAsync<ErrorDialog>("Unable to join session.", errorParams);
            _ = await dialog.Result;
        
            _navigation.NavigateTo($"/");
        }

        MapAvailableGamesFromSession();
    }

    private async Task InternalNoMatches()
    {
        var parameters = new DialogParameters();
        parameters.Add("ErrorMessage", "You guys didn't select any matching games. We'll limit the selections and have you try again.");
        await _dialogService.ShowAsync<ErrorDialog>("No matches!", parameters);

        MapAvailableGamesFromSession();

        StateHasChanged();
    }

    private async Task InternalGameSelected(BoardGame selectedGame)
    {
        var parameters = new DialogParameters();
        parameters.Add("SelectedGame", selectedGame);
        await _dialogService.ShowAsync<BoardGameDialog>("Got one!", parameters);
    }

    private void MapAvailableGamesFromSession()
    {
        _availableGames = new List<BoardGame>();
        _session.AvailableGames.ForEach(x => 
        {
            _availableGames.Add(new BoardGame
            {
                Id = x.Id,
                Name = x.Name,
                Thumbnail = x.Thumbnail,
                TimesPlayed = x.TimesPlayed,
                YearPublished = x.YearPublished,
                IsSelected = false
            });
        });
    }

    private async Task SetupHub()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigation.ToAbsoluteUri("/sessionHub"))
            .Build();

        _hubConnection.On<GamePickingSession>(SessionEvents.UserJoined.ToString(), async (session) => {
            await UserJoined(session);
        });

        _hubConnection.On(SessionEvents.UserLeft.ToString(), async () => {
            await UserLeft();
        });

        _hubConnection.On(SessionEvents.UserReady.ToString(), async () => {
            await ReadyStatusChanged();
        });

        _hubConnection.On<BoardGame>(SessionEvents.GameSelected.ToString(), async (selectedGame) => {
            await GameSelected(selectedGame);
        });

        _hubConnection.On(SessionEvents.NoMatches.ToString(), async () => {
            await NoMatches();
        });

        await _hubConnection.StartAsync();
    }

    public async void Dispose()
    {
        await _hubConnection!.SendAsync(SessionEvents.LeaveSession.ToString(), _session, CurrentUser);
    }

    void FilterGames()
    {
        _availableGames.ForEach(x => x.IsHidden = false);

        _availableGames
            .Where(x => !x.Name.ToLower().Contains(GameFilter.ToLower()))
            .ToList()
            .ForEach(x => x.IsHidden = true);
    }
}