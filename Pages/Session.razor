@page "/Session/{bgguser}"
@inject IBoardGameRepository _boardGameRepo;
@inject ISessionHostingService _sessionManager;
@inject IDialogService _dialogService;

<MudContainer>
    <MudGrid Spacing="2" Justify="Justify.SpaceEvenly">
        <MudItem xs="12"><MudSpacer /></MudItem>
        @if(_session.SessionIsReady)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5">Session ID: @(_session.SessionId)</MudText>
            </MudItem>
        }
        <MudItem xs="12">
            <MudDataGrid T="BoardGame" Items="@_availableGames" Filterable="true" SelectedItemsChanged="@SelectedItemsChanged">
                <Columns>
                    <SelectColumn T="BoardGame" />
                    <PropertyColumn Property="x => x.Name" Title="Title" />
                    <PropertyColumn Property="x => x.TimesPlayed" Title="Times Played" />
                    <PropertyColumn Property="x => x.YearPublished" Title="Year Published" />
                </Columns>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudOverlay Visible="_gamesLoading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code 
{
    // TODO - Need to setup SignalR such that all users on this page for a particular session are looking at the same thing.
    // TODO - Need a way to "end" a session when nobody is connected to it.
    // TODO - Add button to toggle extra information on board game cards.
    // TODO - I think it would look nicer if the games were displayed on cards with their BGG images instead of in a data grid.

    [Parameter]
    public string BggUser { get; set; } = "";

    public bool DisplayExtras { get; set; } = true;

    private List<BoardGame> _availableGames = new List<BoardGame>();

    private List<BoardGame> _selectedGames = new List<BoardGame>();

    private GamePickingSession _session = new GamePickingSession();

    private bool _gamesLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        _gamesLoading = true;
        StateHasChanged();

        var userCollection = await _boardGameRepo.GetCollection(BggUser);

        if(userCollection != null && userCollection.Items.Count() > 0)
        {
            _availableGames = BoardGameMapper.MapFromCollection(userCollection).ToList();
            StateHasChanged();
        }
            
        // TODO - Should probably say something if no games were found.

        // If the session isn't active it must be a new one so we need to setup a session.
        if(_session.SessionId <= 0)
            _session = _sessionManager.StartSession();
        
        _gamesLoading = false;
        StateHasChanged();

        await base.OnParametersSetAsync();
    }

    // Events
    async Task SelectedItemsChanged(HashSet<BoardGame> selectedGames)
    {
        if(selectedGames.Count() == 1)
        {
            var selectedGame = selectedGames.First();
            if(!_selectedGames.Select(x => x.Id).Contains(selectedGame.Id))
                _selectedGames.Add(selectedGame);
            else
                _selectedGames.Remove(selectedGame);
        }
        else
        {
            await _dialogService.ShowMessageBox(
                "ERROR!",
                "Please only select one game at a time.",
                "OK"
            );
        }
    }
}