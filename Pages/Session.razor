@page "/Session/{sessionId:int}"
@inject IDialogService _dialogService;
@inject ISessionHostingService _sessionManager;

<MudContainer>
    <MudGrid Justify="Justify.Center" Class="d-flex justify-center flex-grow-1 gap-4">
        <MudItem xs="12"><MudSpacer></MudSpacer></MudItem>
        @if(_session.SessionIsReady)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h3">Session ID: @(_session.SessionId)</MudText>
            </MudItem>

            <MudItem xs="12">
                <MudContainer Class="d-flex align-center d-flex flex-row">
                    <MudText Typo="Typo.h5">Players: </MudText>
                    @foreach(var user in _session.ConnectedUsers)
                    {
                        if(user.Id == _session.OwningUser.Id)
                            continue;

                        <MudToggleIconButton
                            @bind-Toggled="@user.IsReady"
                            Disabled="true"
                            ToggledIcon="@Icons.Material.Outlined.CheckCircle" ToggledColor="@Color.Success"
                            Style="margin-top: 4px;"
                            Icon="@Icons.Material.Outlined.Circle" Color="Color.Error" />
                    }
                </MudContainer>
            </MudItem>

            <MudItem xs="12">
                <MudTextField 
                    @bind-Value="@GameFilter"
                    Label="Filter"
                    Clearable="true"
                    Variant="Variant.Outlined"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Outlined.FilterAlt"
                    AdornmentColor="Color.Info" 
                    DebounceInterval="500"
                    OnDebounceIntervalElapsed="FilterGames" />
            </MudItem>

            if(_session.OwningUser.Id == CurrentUser.Id)
            {
                <MudItem Justify="Justify.Center" Class="d-flex justify-center flex-grow-1 gap-4" xs="4">
                    <MudButton Variant="Variant.Filled" OnClick="@(() => FindMatches())" Color="Color.Primary" Size="Size.Large">Everyone's ready!</MudButton>
                </MudItem>
            }
            else 
            {
                <MudItem Justify="Justify.Center" Class="d-flex justify-center flex-grow-1 gap-4" xs="4">
                    <MudButton Variant="Variant.Filled" OnClick="@(() => ReadyUp())" Color="Color.Primary" Size="Size.Large">@GetReadyButtonText()</MudButton>
                </MudItem>
            }
            <MudItem Justify="Justify.Center" Class="d-flex justify-center flex-grow-1 gap-4" xs="4">
                <MudButton Variant="Variant.Filled" OnClick="@((x) => ToggleExtraInfo())" Color="Color.Tertiary" Icon="@InfoIcon" Size="Size.Large">@GetExtraInfoButtonText()</MudButton>
            </MudItem>
            <MudItem xs="12"><MudSpacer></MudSpacer></MudItem>
        }
    </MudGrid>
     @* TODO - Center images in card *@
     @* TODO - Cards are different sizes in mobile view *@
    <MudGrid Spacing="2" Justify="Justify.SpaceEvenly">
        @if(_availableGames != null && _availableGames.Count > 0)
        {
            @foreach(var game in _availableGames.Where(x => !x.IsHidden))
            {
                <MudItem sm="12" md="4" lg="3">
                    <MudCard Height="100%" Class="d-flex flex-column">
                        <MudCardHeader>
                            <MudText Align="Align.Center" Typo="Typo.h6">@game.Name</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudImage Src="@game.Thumbnail?.ToString()" Alt="Cover Image" 
                                Height="250" Width="250"
                                ObjectFit="ObjectFit.ScaleDown" ObjectPosition="ObjectPosition.Center"
                                Class="rounded-lg"/>
                            @if(DisplayExtras)
                            {
                                <MudText>Times Played: @game.TimesPlayed</MudText>
                                <MudText>Year Published: @game.YearPublished</MudText>
                            }
                        </MudCardContent>
                        <MudCardActions Class="mt-auto">
                            <MudButton OnClick="() => ToggleGameSelection(game)" Variant="Variant.Filled" Color="@GetGameSelectorButtonColor(game)" FullWidth="true">@GetGameSelectorButtonText(game)</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code 
{
    // TODO - Need to setup SignalR such that all users on this page for a particular session are looking at the same thing.
    // TODO - Need a way to "end" a session when nobody is connected to it.

    [Parameter]
    public int SessionId { get; set; } = 0;

    public bool DisplayExtras { get; set; } = true;

    public string InfoIcon { get; set; } = Icons.Material.Rounded.ExpandMore;

    public string GameFilter { get; set; } = "";

    private GamePickingSession _session = new GamePickingSession();

    private List<BoardGame> _availableGames = new List<BoardGame>();

    private User _user = new User();

    protected override async Task OnParametersSetAsync()
    {
        _user = CurrentUser;

        _session = _sessionManager.GetActiveSession(SessionId) ?? throw new Exception($"Unable to get a session with ID {SessionId}");
        _session?.JoinSession(_user);

        MapAvailableGamesFromSession();
        
        StateHasChanged();

        await base.OnParametersSetAsync();
    }

    public async Task FindMatches()
    {
        try 
        {
            var selectedGame = _session.ChooseFromSelections();

            if(selectedGame == null)
            {
                var parameters = new DialogParameters();
                parameters.Add("ErrorMessage", "You guys didn't select any matching games. We'll limit the selections and have you try again.");
                await _dialogService.ShowAsync<ErrorDialog>("No matches!", parameters);

                _session.RestrictOptions(2);

                MapAvailableGamesFromSession();

                StateHasChanged();
            }
            else
            {
                var parameters = new DialogParameters();
                parameters.Add("ErrorMessage", $"We picked {selectedGame.Name}, good luck!");
                await _dialogService.ShowAsync<ErrorDialog>("Got one!", parameters);
            }
        }
        catch(NoGamesFoundException)
        {
            var parameters = new DialogParameters();
            parameters.Add("ErrorMessage", $"Nobody has selected any games. Pick some then try again.");
            await _dialogService.ShowAsync<ErrorDialog>("No games selected.", parameters);
        }
    }

    public void ReadyUp()
        => _session.ToggleUserReadyStatus(CurrentUser);

    public void ToggleGameSelection(BoardGame selectedGame)
    {
        selectedGame.IsSelected = !selectedGame.IsSelected;
        _session.AddUserSelection(_user, selectedGame);
        StateHasChanged();
    }

    public void ToggleExtraInfo()
    {
        DisplayExtras = !DisplayExtras;
        
        if(DisplayExtras)
            InfoIcon = Icons.Material.Filled.ExpandLess;
        else
            InfoIcon = Icons.Material.Rounded.ExpandMore;

        StateHasChanged();
    }

    public string GetGameSelectorButtonText(BoardGame associatedGame)
        => associatedGame.IsSelected ? "REMOVE" : "ADD";

    public string GetExtraInfoButtonText()
        => DisplayExtras ? "Hide info" : "Show info";

    public string GetReadyButtonText()
        => _user.IsReady ? "Not ready!" : "I'm ready!";

    public MudBlazor.Color GetGameSelectorButtonColor(BoardGame associatedGame)
        => associatedGame.IsSelected ? Color.Error : Color.Success;

    private void MapAvailableGamesFromSession()
    {
        _availableGames = new List<BoardGame>();
        _session.AvailableGames.ForEach(x => 
        {
            _availableGames.Add(new BoardGame
            {
                Id = x.Id,
                Name = x.Name,
                Thumbnail = x.Thumbnail,
                TimesPlayed = x.TimesPlayed,
                YearPublished = x.YearPublished,
                IsSelected = false
            });
        });
    }

    void FilterGames()
    {
        _availableGames.ForEach(x => x.IsHidden = false);

        _availableGames
            .Where(x => !x.Name.ToLower().Contains(GameFilter.ToLower()))
            .ToList()
            .ForEach(x => x.IsHidden = true);
    }
}